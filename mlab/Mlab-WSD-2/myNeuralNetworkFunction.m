function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Jan-2018 16:27:22.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;0.555555555555556;0];
x1_step1.gain = [0.333333333333333;0.0537313432835821;0.00436776588774842];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.7753037361568698;-2.2235893503356809;-0.39440067610080443;-11.695778185230939;-0.60601781607145011;1.1744895164781237;0.53248343433134238;0.52217961435465121;-0.74810593915302015;-0.050319170679902499];
IW1_1 = [2.0200839457991067 1.079903609698321 -4.4614297087870103;-0.0023292952545303919 -0.012007684240391501 -1.8694524353925941;4.729624608235266 -1.7972572876895512 -0.33256848836521274;-1.19491755003498 -5.8892415835119234 4.6674722798897683;-2.5325436842568707 2.4707721664265145 1.8769887041310931;9.6835541238075209e-05 0.00037938684445040517 -0.58283911052715465;1.0160440656289913 -6.8076857910240713 -1.6459167232435421;-8.3007375508429554e-05 -0.00033636665729198348 0.36878287747476513;0.6955351668301416 0.45245354819598599 1.0127962350464168;6.9598996243185407e-05 0.0002770776173333121 0.30744166263884953];

% Layer 2
b2 = 0.34175986084575072;
LW2_1 = [1.1459302294226288e-06 -0.022415881856847016 2.3784201542092113e-07 0.3415907872054405 4.5297369896991089e-07 -0.72239384553309527 6.4053058082157348e-07 1.3615189063923692 -3.5628186976415969e-06 1.5567663429700083];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00436776588774842;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
